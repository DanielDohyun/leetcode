+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| id          | int     |
| name        | varchar |
| salary      | int     |
| managerId   | int     |
+-------------+---------+
id is the primary key (column with unique values) for this table.
Each row of this table indicates the ID of an employee, their name, salary, and the ID of their manager.
 

Write a solution to find the employees who earn more than their managers.

Return the result table in any order.

The result format is in the following example.

 

Example 1:

Input: 
Employee table:
+----+-------+--------+-----------+
| id | name  | salary | managerId |
+----+-------+--------+-----------+
| 1  | Joe   | 70000  | 3         |
| 2  | Henry | 80000  | 4         |
| 3  | Sam   | 60000  | Null      |
| 4  | Max   | 90000  | Null      |
+----+-------+--------+-----------+
Output: 
+----------+
| Employee |
+----------+
| Joe      |
+----------+
Explanation: Joe is the only employee who earns more than his manager.

# Write your MySQL query statement below
SELECT e.Name as Employee
FROM Employee as e
INNER JOIN Employee as m ON e.ManagerId = m.Id
WHERE e.Salary > m.Salary;

The query starts by selecting the Name column from the Employee table and renaming it as Employee.

It specifies the source table as Employee and gives it an alias e.

The query performs an inner join by connecting the Employee table to itself using the alias m. It matches rows where an employee's ManagerId (from table e) matches the Id of their manager (from table m).

The WHERE clause filters the joined results. It only selects rows where an employee's salary (e.Salary) is higher than their manager's salary (m.Salary).